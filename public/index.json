
[{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript","type":"tags"},{"content":"\rA quick disclaimer! #\rWhatever information here may be factually incorrect because I write them from my own honest understanding. If you are not familiar with the topic, I encourage you to do your own research and form your own conclusions. If you are an expert on the topic though, please contact me if there are any errors or incorrect information here so I can correct them.\nEverything written here is extremely simplified, as the purpose of this series is to review my own understanding of the topic.\nI may write more detailed explanations on the subject in the future, which I will link to when appropriate.\nMore About JavaScript Functions - Parameters and Arguments #\rFrom the last article, we learned that functions are simply a set of written instructions that will execute when a function is called. Parameters are placeholer variables we list in a function definition, its somewhat like a function\u0026rsquo;s own variable that will be used only within the function. Arguments are the actual values you pass in when you call the function.\nThere is a fundamental difference between arguments and parameters. Put simply, parameters are the variable names while arguments are the actual values of those variables.\nLet\u0026rsquo;s see an example.\nfunction greet(name) { // \u0026#39;name\u0026#39; is a parameter\rconsole.log(\u0026#34;Hello, \u0026#34; + name + \u0026#34;!\u0026#34;);\r}\rgreet(\u0026#34;Alice\u0026#34;); // \u0026#34;Alice\u0026#34; is an argument\r// Output will be: Hello, Alice! Within the function greet, \u0026rsquo;name\u0026rsquo; is wrapped in parentheses to show that it is a parameter. When the function greet is called, the string \u0026ldquo;Alice\u0026rdquo; is passed in as an argument.\nYou can add multiple parameters and arguments in a function as well, let\u0026rsquo;s look at another example:\nfunction add(a, b) {\rreturn a + b;\r}\rconsole.log(add(3, 4)); // a=3, b=4\r// Output will be: 7 Here, the parameters \u0026lsquo;a\u0026rsquo; and \u0026lsquo;b\u0026rsquo; are defined within the parentheses of the function add. When the add function is called, the integer values \u0026lsquo;3\u0026rsquo; and \u0026lsquo;4\u0026rsquo; are passed in as arguments. But which one corresponds to the parameters?\nIt follows the order in which the arguments are passed. \u0026lsquo;a\u0026rsquo; will have the value of \u0026lsquo;3\u0026rsquo;, and \u0026lsquo;b\u0026rsquo; will have the value of \u0026lsquo;4\u0026rsquo;. Whichever is passed in as arguments follows the order of parameters defined in the function.\nBut what if we have a function to let\u0026rsquo;s say, take a forum user\u0026rsquo;s name to display on the front page, but once they are logged out, there will be no name to display. In this case, we can use a default value to pass in place of the actual argument.\nfunction greet(name = \u0026#34;Guest\u0026#34;) {\rconsole.log(\u0026#34;Welcome, \u0026#34; + name + \u0026#34;!\u0026#34;);\r}\rgreet(\u0026#34;John\u0026#34;); // Output will be: Welcome, John!\rgreet(); // Output will be: Welcome, Guest! In the function greet, we defined the default value of the parameter name with the string \u0026ldquo;Guest\u0026rdquo;. Notice there is an equal sign in there? This is how we define a default value in the case there is no argument provided.\nBut remember, the default value will only be used if there is no argument passed into the function, it is like a backup option when there is nothing else to work with. In the example, the expected output of the first greet function called is different, because the function accepts and uses the provided argument. In the second call of the function, nothing is passed in as an argument, so the function resorts to the default value defined in the function earlier.\nThe Rest Parameter #\rThe next thing I want to discuss is the rest parameter (\u0026hellip;). The rest parameter is just three periods. Using it is very simple, let\u0026rsquo;s see it in a code example:\nfunction sumAll(...numbers) {\rlet total = 0;\rfor (let num of numbers) {\rtotal += num;\r}\rreturn total;\r}\rconsole.log(sumAll(1, 2, 3, 4)); // Output will be: 10 In this example, we have the function sumAll that takes numbers as a parameter, but this time we put a rest operator in front of it. What this means is that the function can accept an unlimited amount of arguments (not really unlimited, but lets just say it can accept a LOT). It is useful for when you don\u0026rsquo;t know how many arguments you\u0026rsquo;re going to accept within the function.\nIn the example, the code logic works by accepting any amount of numbers as arguments, then loops over the number of arguments given and adds them up to give our total result. When the function is called, there are 4 arguments passed in. The sumAll function will then take this, count the total arguments passed in into the \u0026rsquo;total\u0026rsquo; variable defined within the function scope, then uses a for loop to iterate over the arguments passed into \u0026rsquo;numbers\u0026rsquo; (with the rest operator), defines a \u0026rsquo;num\u0026rsquo; variable within the loop to store and calculate the result, then finally adds up the total numbers in the resulting operation and returns it with the \u0026rsquo;total\u0026rsquo; variable.\nThe rest parameter is used very often in frameworks like React. But providing unlimited arguments isn\u0026rsquo;t its only function.\nThe rest parameter can also be use for array destructuring, which basically collects the remaining elements in an array after extracting specified ones you want. Here\u0026rsquo;s a simple example:\nconst [first, second, ...rest] = [1, 2, 3, 4, 5];\r// Result will be: first = 1, second = 2, rest = [3, 4, 5] The resulting array is a shorter, extracted form. The other elements are carried over and stored into their own variables.\nHowever, its important to remember that while the rest operator looks the same in different use cases, you need to be able to know its uses and differentiate them to know exactly what they are meant to do in their respective contexts.\nAnother functions of the rest parameter is forwarding arguments. You can pass along arguments to other functions using the rest parameter like this:\nfunction forwardingArguments(otherFunction, ...argument) {\rreturn otherFunction(...argument);\r} It looks a bit confusing, but it is very simple. The otherFunction is not defined in the example code, but let\u0026rsquo;s pretend it already was to make it easier to explain. When you pass in the otherFunction name without parentheses to call it as a parameter in the forwardingArguments function, the otherFunction itself is not called, you would still have to call it after you defined it as a parameter in the forwarding function. In the forwarding function\u0026rsquo;s case, it returns the otherFunction while passing in the previously defined \u0026hellip;argument in the forwarding function as an argument passed into the otherFunction instead.\nDon\u0026rsquo;t overthink this, the concept itself is very simple. You simply define another function in order to pass arguments to other functions. This method of writing can contribute to cleaner code and logic in the long run.\nRemember, don\u0026rsquo;t overthink things in programming. If it doesn\u0026rsquo;t make sense, give your brain some time to settle and simmer with the boiled information so you can digest it properly. I went through the same thing when I first started out. It will eventually click after some time. Perhaps this is also a reminder to myself, mostly.\nSummary #\r-Parameters are placeholder variables in a function, and used within the function only. Multiple parameters can be defined at the same time.\n-Arguments are the actual values passed into a function when you call it. Multiple arguments can be passed at the same time, as long as there is an equivalent number of parameters already defined within a function without using a rest operator.\n-The rest operator (\u0026hellip;) can be used to accept unlimited argument amounts, destructure arrays, and forward arguments into another function.\n-Try not to overthink programming too much, it is what it is. Give yourself some time to think as well.\n","date":"29 July 2025","externalUrl":null,"permalink":"/posts/tech/javascript3/","section":"Posts","summary":"A review of my understanding of JavaScript, part 3","title":"JavaScript Parameters and Arguments","type":"posts"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/series/learning-javascript/","section":"Series","summary":"","title":"Learning JavaScript!","type":"series"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/lets-learn/","section":"Tags","summary":"","title":"Let's Learn","type":"tags"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/","section":"nojf1","summary":"","title":"nojf1","type":"page"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"29 July 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"\rA quick disclaimer! #\rWhatever information here may be factually incorrect because I write them from my own honest understanding. If you are not familiar with the topic, I encourage you to do your own research and form your own conclusions. If you are an expert on the topic though, please contact me if there are any errors or incorrect information here so I can correct them.\nEverything written here is extremely simplified, as the purpose of this series is to review my own understanding of the topic.\nI may write more detailed explanations on the subject in the future, which I will link to when appropriate.\nJavaScript Functions #\rFunctions are the core of every JavaScript program. To describe it simply, it is a reusable block of JavaScript code you can run anytime in a program by calling it so it carries out a set of instructions described in its code.\nNote that you have to call it before you can use whatever code is inside of it. Think of it like you\u0026rsquo;re calling somebody\u0026rsquo;s name so they know you want them to do something for you.\nA basic function would look something like this:\nfunction basicFunction() {\rconsole.log(\u0026#34;I am a function that prints this sentence to the console.\u0026#34;);\r} To define a function, simply write function then the function name. Function names use camelCase for how naming conventions go. For example, loginHandler and displayResultHere, are proper function names. While there is no exact rule for naming functions and variables, its important to know their naming conventions so that other people can have an easier time looking at your code. Lets just say its standard practice.\nNow lets break down a function block:\nfunction basicFunction() {\r} The above code is an empty function. The parentheses at the end of basicFunction is like a holder for parameters, which you can use to pass in values to a function. You can think of it like passing an input into the function so it uses that input to produce an output. For example, you have a factory that accepts raw materials such as wood (which would be the parameter you\u0026rsquo;re passing into the function), and outputs wooden furniture as the product after processing the wood (which would be the output of the factory\u0026rsquo;s function using the input materials).\nA function that does exactly that would look like this:\nfunction furnitureFactory(rawMaterial) {\rlet finalProduct = rawMaterial + \u0026#34; has been processed into furniture!\u0026#34;;\rreturn finalProduct;\r} Alright, now we have a function to make furniture, but now what? A function exists now, so we need to use it. When you define a function, it won\u0026rsquo;t run by itself. If it did, that would be disastrous, to say the least. To run a function, we must call it.\nfurnitureFactory(\u0026#34;wood\u0026#34;); // calls the function and passes the string \u0026#34;wood\u0026#34; as argument (input) into the function\rconsole.log(furnitureFactory(\u0026#34;wood\u0026#34;)); // the console will output \u0026#34;wood has been processed into furniture!\u0026#34; You can try copy and pasting the function into a browser console, then run the function to see if it outputs correctly. Note that in the original function defined it uses the return keyword to output the result, and return does not log anything outwardly. To see the result, you should console log it by passing in the function call as well as a parameter into it.\nOne thing to note about accepting parameters into functions in JavaScript: the named parameter (rawMaterial) defined in the function is not a variable you can use whenever. Because its defined as a parameter attached in a function, it is limited for that function to use only. I will discuss this more in detail when I write about JavaScript scopes in future parts.\nAnother thing: remember how in the last article I discussed about how variables in JavaScript are dynamic? It applies to function parameters as well. In Java, you would have to explicitly type the data type before the name of the parameter to be accepted into the Java method (equivalent to JavaScript functions). In JavaScript this is not needed, because the data type will be determined at runtime. This is because JavaScript is an interpreted language (or Just-In-Time compiled, JIT-compiled), meaning JavaScript translates each line of code into machine code (binary language) while its running, instead of compiling before runtime.\nTo summarise:\n// this is a function defined with the name \u0026#34;basicFunction\u0026#34;\rfunction basicFunction() { // the parentheses at the end basicFunction are parameters that a function can accept\rconsole.log(\u0026#34;I am a function that prints this sentence to the console.\u0026#34;);\r} // note that curly braces surround the console.log line, this indicates it is a function code block Functions in JavaScript are something JavaScript developers will regularly work with. And since they\u0026rsquo;re reusable, you can focus on writing a few functions and re-use them later on if you need them to save time.\nSummary #\rJavaScript functions are defined with the function keyword.\nIt is a reusable block of code that executes a set of instructions within its code block.\nYou can pass inputs into the function using parameters.\nYou can use the return keyword to send back an output.\nCall the function using its name and parentheses to execute its code block.\nIn the next part I will discuss more about functions in depth as well as control flow.\n","date":"10 June 2025","externalUrl":null,"permalink":"/posts/tech/javascript2/","section":"Posts","summary":"A review of my understanding of JavaScript, part 2","title":"JavaScript functions","type":"posts"},{"content":"\rA quick disclaimer! #\rWhatever information here may be factually incorrect because I write them from my own honest understanding. If you are not familiar with the topic, I encourage you to do your own research and form your own conclusions. If you are an expert on the topic though, please contact me if there are any errors or incorrect information here so I can correct them.\nEverything written here is extremely simplified, as the purpose of this series is to review my own understanding of the topic.\nI may write more detailed explanations on the subject in the future, which I will link to when appropriate.\nA (very) short history of JavaScript, summarised #\rBorn in 1995, JavaScript originally wasn\u0026rsquo;t called JavaScript, it was named LiveScript. Sounds like a foreign language, but make it a programming language.\nSince Java was popular at the time of its creation, it was named JavaScript instead, despite largely having no relation to the Java programming language. For marketing reasons, they say.\nOriginally, JavaScript was meant to add some interactivity to websites. If you knew what websites were like back then, they were totally static and had no way of interacting with the user. No flashy animations, no interactive buttons, no fancy menus, no form of complex functionality. But lets just say it was made as a very, very simple scripting language specifically for browsers.\nLater on, JavaScript gained a little more popularity when it was first standardized by ECMA International, giving the name ECMAScript. To put it simply, its just a set of standards to follow when programming with JavaScript. The point of this standard is to make sure web pages operate as intended and smoothly across different web browsers.\nAfter that, more tools and frameworks started popping up, and so JavaScript soon infected almost every website we know today. The thing that really made JavaScript soar in popularity was AJAX (Asynchronous JavaScript And XML), which was popularized by Google who used them in Gmail and Google Maps. Considering how significant Google is in the internet space, the popularity spike made sense.\nFast forward to now, we have many JavaScript frameworks and tools to help us out now, with newer and better standards to follow when programming with JS. It will keep updating and eventually take over the internet I\u0026rsquo;m sure\u0026hellip;\nWheres JavaScript at? #\rFirst, lets understand where exactly JavaScript runs at. If you are familiar with Java, Python etc. you would know they have their own devkits you need to install from their official distributions or somewhere else.\nJavaScript is different. Its already in your computer as long as you have a browser installed. I don\u0026rsquo;t know any popular browser that doesn\u0026rsquo;t come with its own JavaScript.\nLets talk Google Chrome. As funny as the jokes about the Chrome browser being a memory hoarder, it actually has the best environment to learn, test, and develop with JavaScript. By default, it comes with the V8 engine when you install Chrome, which is a performant and open-source JavaScript and WebAssembly engine made by Google. Not only that, you have access to Chrome DevTools, which is super useful for testing and debugging.\nAll you need to do to access DevTools in Chrome is to inspect element. You can open it by right clicking and selecting inspect element, or use the keyboard shortcut CTRL + SHIFT + C (MacOS: CMD + OPTION + I).\nIn the console tab, you can start writing JavaScript there!\nAlternatively, if you want to write JavaScript in a proper IDE, like VS Code, you can do that too as long as its supported.\nVariables in JavaScript #\rBefore we dive into variables, its important you know about the many common data types in programming in general. I recommend reading MDN\u0026rsquo;s article on data types in detail here.\nBut to summarise data types, theres 8 to know: String, Number, Bigint, Boolean, Undefined, Null, Symbol, Object.\nVariables are like those neat color coded recycle bins, paper for paper, metal for metal, plastic for plastic\u0026hellip; Every variable has their own role to play, but mostly to store data.\nThat recycle bin analogy is not that important though. Variables in JS are a bit strange, if you are someone whose first and only programming language was a strongly typed language like Java (take me for example). Since JavaScript is a dynamically typed language, variables are assigned dynamically, not static like in Java, where you need to specify a data type before assigning a variable.\nWhat that means is if you have a boolean data type, you don\u0026rsquo;t type this in JavaScript:\nboolean thisIsABoolean = true; Theres a few types of keywords you will use instead, one of which is var.\nvar thisIsABoolean = true; However, var is largely unused by today\u0026rsquo;s developers for various reasons I will not get into in this article. Alternatively, let and const is used as the standard for declaring variables.\nlet thisIsAString = \u0026#34;Hello World!\u0026#34;;\rconst thisIsAString = \u0026#34;Const can\u0026#39;t be changed after declaration!\u0026#34;; There is one important difference between let and const. Const, as you thought, stands for constant. What this means is that the data stored in const cannot be changed after declaration. If you try to do that, JS will politely hand you a TypeError error.\nconst thisIsAConst = 2;\rconst thisIsAConst = 9289484592; // JS will give you an error on this line Okay\u0026hellip; but exactly what are variables for? Remember that recycle bin analogy? Variables are simply containers we store data in, but they each have a purpose. Since we don\u0026rsquo;t need to specify the data type before code compilation, we don\u0026rsquo;t need to say that this recycle bin only receives paper, so we can in a way treat variables like smart recycle bins.\nNow with that smart recycle bin we have, we are going to throw a file into it. That file will be stored in that recycle bin temporarily, until its taken to be processed in a recycling facility. While its still in the recycling bin though, you can open the bin, look at whats inside the bin, and even replace whats in the bin, using the let keyword (remember you cant reassign variables with const!).\nAs for when does one use let over const or the other way around, when you have a variable that you think should serve as a temporary placeholder for, lets say, a user input name, you should use let. As for const, normally it is used when you know the value shouldn\u0026rsquo;t be changed, like Pi for example, or specifying the maximum attempts possible in a quiz.\nThat recycle bin has a name (variable name) and a type (data type). Now, to put it simply, we treat variables as a kind of temporary storage for certain data that we would need to use in functions, which I will get into in the next part of this series.\nSummary #\rVariables are temporary storage bins, used to store various data types. You can use and manipulate that temporarily stored data later in your code if you have a use for it.\nVariables have a name and a data type. It is usually declared using let or const. Let is used for variables with values that may change over time. Const is used for variables with values that should not change over time.\n","date":"1 June 2025","externalUrl":null,"permalink":"/posts/tech/javascript1/","section":"Posts","summary":"A review of my understanding of JavaScript","title":"Let's learn JavaScript! Pt. 1","type":"posts"},{"content":"\rWhat\u0026rsquo;s new? #\rOnly the homepage background was changed to the lavalamp background to make the site more consistent with the background theme.\nThe bird profile picture is here to stay though, since I couldn\u0026rsquo;t find any nice photos to fit in with the site theming.\nHowever I still haven\u0026rsquo;t found out how to change the featured images, so I decided to remove them entirely temporarily.\nAside from those, that is all for this update today. This is not the end of course, theres going to be more modifications to the site soon. Stay tuned\u0026hellip;\n","date":"1 June 2025","externalUrl":null,"permalink":"/posts/update/updates1/","section":"Posts","summary":"News and updates about site","title":"Update - 2025-06-01","type":"posts"},{"content":"","date":"1 June 2025","externalUrl":null,"permalink":"/tags/updates/","section":"Tags","summary":"","title":"Updates","type":"tags"},{"content":"\rContent Plans #\rThere will be many changes to this website soon, content in particular. There won\u0026rsquo;t be much to see at the moment because I\u0026rsquo;ve only just set up this website and deployed it using GitHub Pages. I plan to maybe write at least one or two posts a week about my learning journey in software development or IT in general. I might also write about other unrelated things with proper tagging in mind.\nCurrent website looks #\rCurrently, the website theming is full of birds and the color blue. I may change the website aesthetics and looks in the future when I feel like it and have design ideas. For now, I\u0026rsquo;m going to stick with the bird photos.\nKeeping myself accountable #\rI made this website for several reasons, but the most important one is to keep myself accountable through writing posts about various subjects, but most importantly about my learning journey in being a software engineer or {insert related career name}.\nReport errors #\rIf you, the reader, notice any mistakes or bugs on the website, please contact me about it!\n","date":"30 May 2025","externalUrl":null,"permalink":"/posts/update/notice1/","section":"Posts","summary":"Notice about this website","title":"(Not Very) Important Notice About Site","type":"posts"},{"content":"","date":"30 May 2025","externalUrl":null,"permalink":"/tags/notice/","section":"Tags","summary":"","title":"Notice","type":"tags"},{"content":"","date":"30 May 2025","externalUrl":null,"permalink":"/tags/second/","section":"Tags","summary":"","title":"Second","type":"tags"},{"content":"The second article to commemorate the creation of this website!\nAside from that, I just wanted to make this post to mention how proud of myself to have created this website instead of getting into tutorial hell of personal websites.\nThe style looks decent for now, but I might change it up later on, depending on my mood.\n","date":"30 May 2025","externalUrl":null,"permalink":"/posts/misc/secondpost/","section":"Posts","summary":"","title":"The second article","type":"posts"},{"content":"","date":"28 May 2025","externalUrl":null,"permalink":"/tags/first/","section":"Tags","summary":"","title":"First","type":"tags"},{"content":"I have finally done it, I\u0026rsquo;ve created the very first article in my 4 hours of configuring this site!\nNaturally that calls for celebration, by looking at the time and oh\u0026hellip; its already 2am.\nThat celebration would be of course, continue working on this website.\nSo far the worst of it was setting up the project. I think I spent at least 2 hours of the time spent since writing this article finding out whats wrong with the whole configuration of the site only to find out that I was setting up configs on the wrong directory the whole time\u0026hellip; nice.\nAs for why I picked Hugo and the Blowfish theme, I have a bad case of decision paralysis when it comes to making something as personal as a personal website. I could spend at least 2 whole days looking at my options. Luckily LLMs exist and all I needed to do was ask what technologies to use for my website, and here I am.\nI thought of using React, the good old HTML CSS JS route, or some other frameworks that would make my head spin more than it should\u0026hellip; But in the end if its for a simple site with some blogging it would be best to use something like Hugo. Jekyll was suggested to me as well, but I chose Hugo anyway for the fast development times. It is nice not having to wait 5 seconds (which feels more like 5 years) every time I change something in the codebase for the local server to reload.\nThe bird photos and themes are just random stuff I found on my phone gallery that looks somewhat nice. Its more of a placeholder for now though.\nThis is officially my first brain-dump into this website, now I hope I don\u0026rsquo;t run into anymore issues after this\u0026hellip;\nI should probably touch wood.\n","date":"28 May 2025","externalUrl":null,"permalink":"/posts/misc/firstpost/","section":"Posts","summary":"Hello World","title":"The first article","type":"posts"},{"content":"\rWhos this author? #\rI\u0026rsquo;m Nicole, a 2nd year student studying Bachelor\u0026rsquo;s in Software Engineering (Honours) at Wawasan Open University (WOU).\n\u0026hellip;thats the boring part of the introduction. Let\u0026rsquo;s get that out of the way. To start, I find interest in many things, whether it be animals, technology, culture, cosmic existence itself\u0026hellip; Whatever my brain thinks of in the moment, I\u0026rsquo;ll get into deep dives about it.\nAt the moment though, I\u0026rsquo;m exploring and trying out stuff to figure out what I like and don\u0026rsquo;t like. I plan to document my findings of whatever I\u0026rsquo;m exploring in this website through posting written articles on the subject.\nI will try to update this website with as many posts as possible to keep myself accountable on my learning journey. To the rabbit holes I go!\nVery important if you\u0026rsquo;re an employer reading: I\u0026rsquo;m actively looking for an internship currently\nMy Interests #\rLike I said before, its whatever my brain thinks of in the moment. It could be about jellyfish, how they look like plastic bags, why turtles think its plastic bags\u0026hellip; Or it could be about the philosophical concept of free will, and whether its real or not, or only that we think its real\u0026hellip;\nAs you can see, I am quite scatter-brained. One thought leads to the next. I\u0026rsquo;ve recently come to accept that this is just who I am, and my interests can be quite varied over time.\nIf you would ask me about my interests that are consistent with my whole life however, it would be some specific media, video games, and the world of technology in general.\n","externalUrl":null,"permalink":"/about/","section":"nojf1","summary":"","title":"About Me","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"\rMy Contact Details #\rEmail: ojfnicole@gmail.com #\rPhone: +6 012-4709208 #\r*I am more likely to reply back on WhatsApp\n","externalUrl":null,"permalink":"/contact/","section":"nojf1","summary":"","title":"Contact Me","type":"page"}]